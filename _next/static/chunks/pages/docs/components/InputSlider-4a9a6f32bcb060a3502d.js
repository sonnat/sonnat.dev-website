(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[2497],{5676:function(t,n,e){"use strict";e.r(n),e.d(n,{default:function(){return w},meta:function(){return C}});var l=e(6265),u=e(8140),r=e(8347),o=e(7294),i=e(3905),a=e(7568),d=e(8476),s=e(7703),c=e(9387),k=e(3161),p=e(5893),m=e(2292),h=e(6983),f=e(3910),b=function(){var t=o.useState(0),n=(0,m.Z)(t,2),e=n[0],l=n[1];return(0,p.jsx)(f.Z,{flexDirection:"column",code:'import InputSlider from "@sonnat/ui/InputSlider";\nimport InputStepper from "@sonnat/ui/InputStepper";\nimport * as React from "react";\n\nconst Demo: React.FC = () => {\n  const [value, setValue] = React.useState(0);\n\n  return (\n    <React.Fragment>\n    <InputSlider\n      min={0}\n      max={10}\n      value={value}\n      onChange={(_, newValue) => void setValue(newValue as number)}\n    />\n    <InputStepper\n      size="small"\n      min={0}\n      max={10}\n      value={value}\n      onAdd={() => void setValue(v => Math.floor(v) + 1)}\n      onSubtract={() => void setValue(v => Math.floor(v) - 1)}\n    />\n    </React.Fragment>\n  );\n};\n\nexport default Demo;\n',children:(0,p.jsxs)(o.Fragment,{children:[(0,p.jsx)(a.Z,{min:0,max:10,value:e,onChange:function(t,n){l(n)}}),(0,p.jsx)("br",{}),(0,p.jsx)(h.Z,{size:"small",min:0,max:10,value:e,onAdd:function(){l((function(t){return Math.floor(t)+1}))},onSubtract:function(){l((function(t){return Math.floor(t)-1}))}})]})})};b.displayName="InputSliderControlledDemo";var v=b,g=e(9008),S=e(3257),y=e(1919);function T(t,n){var e=Object.keys(t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(t);n&&(l=l.filter((function(n){return Object.getOwnPropertyDescriptor(t,n).enumerable}))),e.push.apply(e,l)}return e}function x(t){for(var n=1;n<arguments.length;n++){var e=null!=arguments[n]?arguments[n]:{};n%2?T(Object(e),!0).forEach((function(n){(0,l.Z)(t,n,e[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(e)):T(Object(e)).forEach((function(n){Object.defineProperty(t,n,Object.getOwnPropertyDescriptor(e,n))}))}return t}var C={title:"InputSlider",description:"Input sliders allow users to make selections from a range of values.",getLayout:function(){return function(t){return(0,i.kt)(k.Z,{mdxType:"WithSidebar"},t)}}},I={meta:C};function w(t){var n=t.components,e=(0,r.Z)(t,["components"]);return(0,i.kt)("wrapper",x(x(x({},I),e),{},{components:n,mdxType:"MDXLayout"}),(0,i.kt)(g.default,{mdxType:"Head"},(0,y.aT)("".concat(C.title," | Sonnat Developer Tools, React Components & Resources")),(0,y.u2)(C.description),(0,y.ai)("".concat(S.z,"/docs/components/").concat(C.title)),(0,y.hL)([].concat((0,u.Z)(S.t),["inputslider","slider","input"]))),(0,i.kt)("h1",null,(0,i.kt)("span",null,C.title),(0,i.kt)(c.Z,{anchorId:"overview",mdxType:"AnchorButton"}),(0,i.kt)(s.Z,{href:"pages/docs/components/".concat(C.title,".mdx"),mdxType:"PageEditButton"})),(0,i.kt)("p",null,C.description),(0,i.kt)("p",null,"InputSliders are ideal for adjusting settings such as volume, brightness, or applying image filters."),(0,i.kt)("h2",null,(0,i.kt)("span",null,"Continuous InputSlider"),(0,i.kt)(c.Z,{anchorId:"continuous-inputslider",mdxType:"AnchorButton"})),(0,i.kt)(f.Z,{code:'<InputSlider variant="continuous" />',mdxType:"DemoBox"},(0,i.kt)(a.Z,{variant:"continuous",mdxType:"InputSlider"})),(0,i.kt)("h2",null,(0,i.kt)("span",null,"Discrete InputSlider"),(0,i.kt)(c.Z,{anchorId:"discrete-inputslider",mdxType:"AnchorButton"})),(0,i.kt)(f.Z,{code:'<InputSlider variant="discrete" step={10} />',mdxType:"DemoBox"},(0,i.kt)(a.Z,{variant:"discrete",step:10,mdxType:"InputSlider"})),(0,i.kt)("h2",null,(0,i.kt)("span",null,"Bidirectional InputSlider (Range Slider)"),(0,i.kt)(c.Z,{anchorId:"bidirectional-inputslider",mdxType:"AnchorButton"})),(0,i.kt)("p",null,"If you pass a touple (array with just two elements) as"," ",(0,i.kt)("inlineCode",null,"value")," or ",(0,i.kt)("inlineCode",null,"defaultValue"),", you will get a bidirectional slider."),(0,i.kt)(f.Z,{code:'<InputSlider variant="discrete" step={10} defaultValue={[0, 100]} />',mdxType:"DemoBox"},(0,i.kt)(a.Z,{variant:"discrete",step:10,defaultValue:[0,100],mdxType:"InputSlider"})),(0,i.kt)("h2",null,(0,i.kt)("span",null,"Controlled InputSlider"),(0,i.kt)(c.Z,{anchorId:"controlled-inputslider",mdxType:"AnchorButton"})),(0,i.kt)("p",null,"You can use the ",(0,i.kt)("inlineCode",null,"value"),", and"," ",(0,i.kt)("inlineCode",null,"onChange")," properties to control the value state of the input slider."),(0,i.kt)(v,{mdxType:"InputSliderControlledDemo"}),(0,i.kt)("h2",null,(0,i.kt)("span",null,"API"),(0,i.kt)(c.Z,{anchorId:"api",mdxType:"AnchorButton"})),(0,i.kt)("p",null,"Learn more about the properties and the customization points."),(0,i.kt)("h3",null,(0,i.kt)("span",null,"Usage"),(0,i.kt)(c.Z,{anchorId:"usage",mdxType:"AnchorButton"})),(0,i.kt)("pre",null,(0,i.kt)("code",x({parentName:"pre"},{className:"language-typescript"}),'// recommended\nimport InputSlider from "@sonnat/ui/InputSlider";\n\n//or\nimport { InputSlider } from "@sonnat/ui";\n')),(0,i.kt)("h3",null,(0,i.kt)("span",null,"Properties"),(0,i.kt)(c.Z,{anchorId:"properties",mdxType:"AnchorButton"})),(0,i.kt)("p",null,"Note that the documentation avoids mentioning all the native props (there are a lot) in this section of the components."),(0,i.kt)("table",{cols:4},(0,i.kt)("caption",null,"InputSlider Properties"),(0,i.kt)("thead",null,(0,i.kt)("tr",null,(0,i.kt)("th",null,"Name"),(0,i.kt)("th",null,"Type"),(0,i.kt)("th",null,"Default"),(0,i.kt)("th",null,"Description"))),(0,i.kt)("tbody",null,(0,i.kt)("tr",null,(0,i.kt)("td",null,"className"),(0,i.kt)("td",null,"string"),(0,i.kt)("td",null,"-"),(0,i.kt)("td",null,"Append to the class names applied to the component so you can override or extend the styles.")),(0,i.kt)("tr",null,(0,i.kt)("td",null,"max"),(0,i.kt)("td",null,"number"),(0,i.kt)("td",null,"100"),(0,i.kt)("td",null,"The maximum allowed value of the slider. Should not be equal to"," ",(0,i.kt)("inlineCode",null,"min"),".")),(0,i.kt)("tr",null,(0,i.kt)("td",null,"min"),(0,i.kt)("td",null,"number"),(0,i.kt)("td",null,"0"),(0,i.kt)("td",null,"The minimum allowed value of the slider. Should not be equal to"," ",(0,i.kt)("inlineCode",null,"max"),".")),(0,i.kt)("tr",null,(0,i.kt)("td",null,"fractionDigits"),(0,i.kt)("td",null,"number"),(0,i.kt)("td",null,"4"),(0,i.kt)("td",null,"The Number of digits after the decimal point. Must be in the range 0 to 20, inclusive.")),(0,i.kt)("tr",null,(0,i.kt)("td",null,"step"),(0,i.kt)("td",null,"number"),(0,i.kt)("td",null,"-"),(0,i.kt)("td",null,"The granularity with which the slider can step through values.",(0,i.kt)("br",null),"It's"," ",(0,i.kt)("em",null,(0,i.kt)("strong",null,"required"))," ","to use this when you are using a ",(0,i.kt)("inlineCode",null,"discrete")," ","slider.")),(0,i.kt)("tr",null,(0,i.kt)("td",null,"value"),(0,i.kt)("td",null,"number[ ] | number"),(0,i.kt)("td",null,"-"),(0,i.kt)("td",null,"The value of the slider.",(0,i.kt)("br",null),"For ",(0,i.kt)("inlineCode",null,"bidirectional")," sliders, provide an array with two values.")),(0,i.kt)("tr",null,(0,i.kt)("td",null,"defaultValue"),(0,i.kt)("td",null,"number[ ] | number"),(0,i.kt)("td",null,"-"),(0,i.kt)("td",null,"The default value. Use when the component is not controlled.",(0,i.kt)("br",null),"For ",(0,i.kt)("inlineCode",null,"bidirectional")," sliders, provide an array with two values.")),(0,i.kt)("tr",null,(0,i.kt)("td",null,"variant"),(0,i.kt)("td",null,'"continuous"',(0,i.kt)("br",null),'| "discrete"'),(0,i.kt)("td",null,'"continuous"'),(0,i.kt)("td",null,"The variant of the slider.")),(0,i.kt)("tr",null,(0,i.kt)("td",null,"disabled"),(0,i.kt)("td",null,"boolean"),(0,i.kt)("td",null,"false"),(0,i.kt)("td",null,"If ",(0,i.kt)("inlineCode",null,"true"),", the slider will be disabled.")),(0,i.kt)("tr",null,(0,i.kt)("td",null,"onMount"),(0,i.kt)("td",null,"function"),(0,i.kt)("td",null,"-"),(0,i.kt)("td",null,"The Callback fires when the component mounts.",(0,i.kt)("br",null),(0,i.kt)("em",null,(0,i.kt)("strong",null,"Signature:"))," ",(0,i.kt)("inlineCode",null,"function() => void"))),(0,i.kt)("tr",null,(0,i.kt)("td",null,"onDismount"),(0,i.kt)("td",null,"function"),(0,i.kt)("td",null,"-"),(0,i.kt)("td",null,"The Callback fires when the component dismounts.",(0,i.kt)("br",null),(0,i.kt)("em",null,(0,i.kt)("strong",null,"Signature:"))," ",(0,i.kt)("inlineCode",null,"function() => void"))),(0,i.kt)("tr",null,(0,i.kt)("td",null,"onChange"),(0,i.kt)("td",null,"function"),(0,i.kt)("td",null,"-"),(0,i.kt)("td",null,"The Callback fires when the value has changed.",(0,i.kt)("br",null),(0,i.kt)("em",null,(0,i.kt)("strong",null,"Signature:"))," ",(0,i.kt)("inlineCode",null,"function(event: React.MouseEvent | React.TouchEvent, value: number[] | number) => void"))),(0,i.kt)("tr",null,(0,i.kt)("td",null,"onDragging"),(0,i.kt)("td",null,"function"),(0,i.kt)("td",null,"-"),(0,i.kt)("td",null,"The Callback fires when the slider is being dragged.",(0,i.kt)("br",null),(0,i.kt)("em",null,(0,i.kt)("strong",null,"Signature:"))," ",(0,i.kt)("inlineCode",null,"function(event: React.MouseEvent | React.TouchEvent, state: State) => void"),(0,i.kt)("br",null),"Where the ",(0,i.kt)("inlineCode",null,"State")," is:",(0,i.kt)(d.Z,{codeBlock:!0,children:"interface HandleState {\n  active: boolean;\n  currentX: number;\n  initialX: number;\n  offsetX: number;\n  zIndex: number;\n};\n\ninterface State {\n  sup: HandleState & { right: number };\n  inf: HandleState & { left: number };\n  track: { right: number; left: number };\n};",mdxType:"Code"}))),(0,i.kt)("tr",null,(0,i.kt)("td",null,"onDragStart"),(0,i.kt)("td",null,"function"),(0,i.kt)("td",null,"-"),(0,i.kt)("td",null,"The Callback fires when the dragging starts.",(0,i.kt)("br",null),(0,i.kt)("em",null,(0,i.kt)("strong",null,"Signature:"))," ",(0,i.kt)("inlineCode",null,"function(event: React.MouseEvent | React.TouchEvent, state: State) => void"),(0,i.kt)("br",null),"Where the ",(0,i.kt)("inlineCode",null,"State")," is:",(0,i.kt)(d.Z,{codeBlock:!0,children:"interface HandleState {\n  active: boolean;\n  currentX: number;\n  initialX: number;\n  offsetX: number;\n  zIndex: number;\n};\n\ninterface State {\n  sup: HandleState & { right: number };\n  inf: HandleState & { left: number };\n  track: { right: number; left: number };\n};",mdxType:"Code"}))),(0,i.kt)("tr",null,(0,i.kt)("td",null,"onDragEnd"),(0,i.kt)("td",null,"function"),(0,i.kt)("td",null,"-"),(0,i.kt)("td",null,"The Callback fires when the dragging ends.",(0,i.kt)("br",null),(0,i.kt)("em",null,(0,i.kt)("strong",null,"Signature:"))," ",(0,i.kt)("inlineCode",null,"function(event: React.MouseEvent | React.TouchEvent, state: State) => void"),(0,i.kt)("br",null),"Where the ",(0,i.kt)("inlineCode",null,"State")," is:",(0,i.kt)(d.Z,{codeBlock:!0,children:"interface HandleState {\n  active: boolean;\n  currentX: number;\n  initialX: number;\n  offsetX: number;\n  zIndex: number;\n};\n\ninterface State {\n  sup: HandleState & { right: number };\n  inf: HandleState & { left: number };\n  track: { right: number; left: number };\n};",mdxType:"Code"})))),(0,i.kt)("tfoot",null,(0,i.kt)("tr",null,(0,i.kt)("td",{colSpan:"4"},(0,i.kt)("ul",null,(0,i.kt)("li",null,"The ",(0,i.kt)("inlineCode",null,"ref")," is forwarded to the root element."),(0,i.kt)("li",null,"Any other properties supplied will be provided to the root element.")))))))}w.isMDXComponent=!0},5472:function(t,n,e){(window.__NEXT_P=window.__NEXT_P||[]).push(["/docs/components/InputSlider",function(){return e(5676)}])}},function(t){t.O(0,[9774,3679,1161,6156,320,2652,6829,6166,1635,9481,9701],(function(){return n=5472,t(t.s=n);var n}));var n=t.O();_N_E=n}]);