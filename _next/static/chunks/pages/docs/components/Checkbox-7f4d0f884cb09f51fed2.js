_N_E=(window.webpackJsonp_N_E=window.webpackJsonp_N_E||[]).push([[18],{Amqx:function(e,t,n){"use strict";n.r(t),n.d(t,"meta",(function(){return w})),n.d(t,"default",(function(){return P}));var b=n("cpVT"),l=n("z7pX"),c=n("dhJC"),o=n("q1tI"),u=n("7ljp"),a=n("eSLf"),d=n("jSqJ"),r=n("PW80"),i=n("G0Pc"),h=n("XLwr"),s=n("nKUr"),j=n("xvhg"),O=n("fZnD"),p=n("UhvI"),m=function(){var e=o.useState(!1),t=Object(j.a)(e,2),n=t[0],b=t[1];return Object(s.jsx)(p.a,{flexDirection:"column",code:'import Checkbox from "@sonnat/ui/Checkbox";\nimport Button from "@sonnat/ui/Button";\nimport * as React from "react";\n\nconst Demo: React.FC = () => {\n  const [checked, setChecked] = React.useState(false);\n\n  return (\n    <React.Fragment>\n      <Button\n        variant="outlined"\n        size="small"\n        label="Toggle the Checkbox"\n        onClick={() => void setChecked(c => !c)}\n      />\n      <Checkbox\n        label="Label"\n        checked={checked}\n        inputProps={{ id: "ch-box-2" }}\n        onChange={() => void setChecked(c => !c)}\n      />\n    </React.Fragment>\n  );\n};\n\nexport default Demo;\n',children:Object(s.jsxs)(o.Fragment,{children:[Object(s.jsx)(O.a,{variant:"outlined",size:"small",label:"Toggle the Checkbox",onClick:function(){b((function(e){return!e}))}}),Object(s.jsx)(a.a,{label:"Label",checked:n,inputProps:{id:"ch-box-2"},onChange:function(){b((function(e){return!e}))}})]})})};m.displayName="CheckboxControlledDemo";var x=m,k=n("g4pe"),C=n.n(k),f=n("C6zX"),g=n("cBaE");function y(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var b=Object.getOwnPropertySymbols(e);t&&(b=b.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,b)}return n}function T(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?y(Object(n),!0).forEach((function(t){Object(b.a)(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):y(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}var w={title:"Checkbox",description:"Checkboxes are used for selecting multiple values from several options.",getLayout:function(){return function(e){return Object(u.b)(h.a,{mdxType:"WithSidebar"},e)}}},v={meta:w};function P(e){var t=e.components,n=Object(c.a)(e,["components"]);return Object(u.b)("wrapper",T(T(T({},v),n),{},{components:t,mdxType:"MDXLayout"}),Object(u.b)(C.a,{mdxType:"Head"},Object(g.e)("".concat(w.title," | Sonnat Developer Tools, React Components & Resources")),Object(g.c)(w.description),Object(g.b)("".concat(f.b,"/docs/components/").concat(w.title)),Object(g.d)([].concat(Object(l.a)(f.a),["checkbox","\u0686\u06a9\u200c\u0628\u0627\u06a9\u0633","\u0686\u06a9 \u0628\u0627\u06a9\u0633"]))),Object(u.b)("h1",null,Object(u.b)("span",null,w.title),Object(u.b)(i.a,{anchorId:"overview",mdxType:"AnchorButton"}),Object(u.b)(r.a,{href:"pages/docs/components/".concat(w.title,".mdx"),mdxType:"PageEditButton"})),Object(u.b)("p",null,w.description),Object(u.b)("p",null,"If you use only one checkbox, it is the same as using"," ",Object(u.b)("a",{href:"/docs/components/Switch",title:"Switch documentation"},"Switch")," ","to toggle between two states. The difference is that Switch will trigger the state change directly, but Checkbox just marks the state as changed and this needs to be submitted."),Object(u.b)("h2",null,Object(u.b)("span",null,"Simple Checkboxes"),Object(u.b)(i.a,{anchorId:"simple-checkboxes",mdxType:"AnchorButton"})),Object(u.b)(p.a,{code:'<Checkbox />\n<Checkbox disabled />\n<Checkbox defaultChecked disabled />\n<Checkbox indeterminated />\n<Checkbox indeterminated disabled />\n<Checkbox inputProps={{ id: "ch-box-0" }} defaultChecked label="Label" />\n<Checkbox\n  inputProps={{ id: "ch-box-1" }}\n  defaultChecked\n  label="Label"\n  disabled\n/>',mdxType:"DemoBox"},Object(u.b)(a.a,{mdxType:"Checkbox"}),Object(u.b)(a.a,{disabled:!0,mdxType:"Checkbox"}),Object(u.b)(a.a,{defaultChecked:!0,disabled:!0,mdxType:"Checkbox"}),Object(u.b)(a.a,{indeterminated:!0,mdxType:"Checkbox"}),Object(u.b)(a.a,{indeterminated:!0,disabled:!0,mdxType:"Checkbox"}),Object(u.b)(a.a,{inputProps:{id:"ch-box-0"},defaultChecked:!0,label:"Label",mdxType:"Checkbox"}),Object(u.b)(a.a,{inputProps:{id:"ch-box-1"},defaultChecked:!0,label:"Label",disabled:!0,mdxType:"Checkbox"})),Object(u.b)("h2",null,Object(u.b)("span",null,"Controlled Checkboxes"),Object(u.b)(i.a,{anchorId:"controlled-checkboxes",mdxType:"AnchorButton"})),Object(u.b)("p",null,"You can use the ",Object(u.b)("inlineCode",null,"checked"),", and"," ",Object(u.b)("inlineCode",null,"onChange")," properties to control the behaviour of the checkbox."),Object(u.b)(x,{mdxType:"CheckboxControlledDemo"}),Object(u.b)("h2",null,Object(u.b)("span",null,"With ",Object(u.b)("mark",null,"CheckGroup")),Object(u.b)(i.a,{anchorId:"with-checkgroup",mdxType:"AnchorButton"})),Object(u.b)("p",null,Object(u.b)("a",{href:"/docs/components/CheckGroup",title:"CheckGroup documentation"},"CheckGroup")," ","is a helpful wrapper used to group and manage checkbox controls with an easier API. CheckGroup can also be controlled/uncontrolled like the checkboxes.",Object(u.b)("br",null),"To learn more about ",Object(u.b)("strong",null,"CheckGroup"),"'s API,"," ",Object(u.b)("a",{href:"/docs/components/CheckGroup",title:"CheckGroup documentation"},"read it's documentation"),"."),Object(u.b)(p.a,{code:'<CheckGroup name="food" defaultValue={["kebab"]}>\n  <Checkbox inputProps={{ id: "ch-box-00" }} label="Burger" value="burger" />\n  <Checkbox inputProps={{ id: "ch-box-01" }} label="Sushi" value="sushi" />\n  <Checkbox inputProps={{ id: "ch-box-02" }} label="Kebab" value="kebab" />\n</CheckGroup>',mdxType:"DemoBox"},Object(u.b)(d.a,{name:"food",defaultValue:["kebab"],mdxType:"CheckGroup"},Object(u.b)(a.a,{inputProps:{id:"ch-box-00"},label:"Burger",value:"burger",mdxType:"Checkbox"}),Object(u.b)(a.a,{inputProps:{id:"ch-box-01"},label:"Sushi",value:"sushi",mdxType:"Checkbox"}),Object(u.b)(a.a,{inputProps:{id:"ch-box-02"},label:"Kebab",value:"kebab",mdxType:"Checkbox"}))),Object(u.b)("h2",null,Object(u.b)("span",null,"API"),Object(u.b)(i.a,{anchorId:"api",mdxType:"AnchorButton"})),Object(u.b)("p",null,"Learn more about the properties and the customization points."),Object(u.b)("h3",null,Object(u.b)("span",null,"Usage"),Object(u.b)(i.a,{anchorId:"usage",mdxType:"AnchorButton"})),Object(u.b)("pre",null,Object(u.b)("code",T({parentName:"pre"},{className:"language-typescript"}),'// recommended\nimport Checkbox from "@sonnat/ui/Checkbox";\n\n//or\nimport { Checkbox } from "@sonnat/ui";\n')),Object(u.b)("h3",null,Object(u.b)("span",null,"Properties"),Object(u.b)(i.a,{anchorId:"properties",mdxType:"AnchorButton"})),Object(u.b)("p",null,"Note that the documentation avoids mentioning all the native props (there are a lot) in this section of the components."),Object(u.b)("table",{cols:4},Object(u.b)("caption",null,"Checkbox Properties"),Object(u.b)("thead",null,Object(u.b)("tr",null,Object(u.b)("th",null,"Name"),Object(u.b)("th",null,"Type"),Object(u.b)("th",null,"Default"),Object(u.b)("th",null,"Description"))),Object(u.b)("tbody",null,Object(u.b)("tr",null,Object(u.b)("td",null,"className"),Object(u.b)("td",null,"string"),Object(u.b)("td",null,"-"),Object(u.b)("td",null,"Append to the class names applied to the component so you can override or extend the styles.")),Object(u.b)("tr",null,Object(u.b)("td",null,"label"),Object(u.b)("td",null,"string"),Object(u.b)("td",null,"-"),Object(u.b)("td",null,"If ",Object(u.b)("inlineCode",null,"label")," was provided, a"," ",Object(u.b)("inlineCode",null,"<label>")," element will be rendered next to the checkbox.")),Object(u.b)("tr",null,Object(u.b)("td",null,"name"),Object(u.b)("td",null,"string"),Object(u.b)("td",null,"-"),Object(u.b)("td",null,"The name of the checkbox.")),Object(u.b)("tr",null,Object(u.b)("td",null,"value"),Object(u.b)("td",null,"string"),Object(u.b)("td",null,"-"),Object(u.b)("td",null,"The value of the checkbox. The DOM API casts this to a string.",Object(u.b)("br",null),"The browser uses ",Object(u.b)("inlineCode",null,'"on"')," as the default value.")),Object(u.b)("tr",null,Object(u.b)("td",null,"size"),Object(u.b)("td",null,'"medium"',Object(u.b)("br",null),'| "small"'),Object(u.b)("td",null,'"medium"'),Object(u.b)("td",null,"The size of the checkbox.")),Object(u.b)("tr",null,Object(u.b)("td",null,"indeterminated"),Object(u.b)("td",null,"boolean"),Object(u.b)("td",null,"false"),Object(u.b)("td",null,"If ",Object(u.b)("inlineCode",null,"true"),", the checkbox will appear indeterminate.",Object(u.b)("br",null),"This does not set the native input element to indeterminate due to inconsistent behavior across browsers.")),Object(u.b)("tr",null,Object(u.b)("td",null,"readOnly"),Object(u.b)("td",null,"boolean"),Object(u.b)("td",null,"false"),Object(u.b)("td",null,"If ",Object(u.b)("inlineCode",null,"true"),", the checkbox will be read-only.")),Object(u.b)("tr",null,Object(u.b)("td",null,"checked"),Object(u.b)("td",null,"boolean"),Object(u.b)("td",null,"-"),Object(u.b)("td",null,"If ",Object(u.b)("inlineCode",null,"true"),", the checkbox will be checked.")),Object(u.b)("tr",null,Object(u.b)("td",null,"defaultChecked"),Object(u.b)("td",null,"boolean"),Object(u.b)("td",null,"-"),Object(u.b)("td",null,"The default state of ",Object(u.b)("inlineCode",null,"checked"),". Use when the component is not controlled.")),Object(u.b)("tr",null,Object(u.b)("td",null,"disabled"),Object(u.b)("td",null,"boolean"),Object(u.b)("td",null,"false"),Object(u.b)("td",null,"If ",Object(u.b)("inlineCode",null,"true"),", the checkbox will be disabled.")),Object(u.b)("tr",null,Object(u.b)("td",null,"required"),Object(u.b)("td",null,"boolean"),Object(u.b)("td",null,"false"),Object(u.b)("td",null,"If ",Object(u.b)("inlineCode",null,"true"),", the checkbox will be required.")),Object(u.b)("tr",null,Object(u.b)("td",null,"hasError"),Object(u.b)("td",null,"boolean"),Object(u.b)("td",null,"false"),Object(u.b)("td",null,"If ",Object(u.b)("inlineCode",null,"true"),", the checkbox will indicate invalid input.")),Object(u.b)("tr",null,Object(u.b)("td",null,"inputProps"),Object(u.b)("td",null,"object"),Object(u.b)("td",null,"-"),Object(u.b)("td",null,"The properties applied to the ",Object(u.b)("inlineCode",null,"input")," element.")),Object(u.b)("tr",null,Object(u.b)("td",null,"labelProps"),Object(u.b)("td",null,"object"),Object(u.b)("td",null,"-"),Object(u.b)("td",null,"The properties applied to the ",Object(u.b)("inlineCode",null,"label")," element.")),Object(u.b)("tr",null,Object(u.b)("td",null,"onChange"),Object(u.b)("td",null,"function"),Object(u.b)("td",null,"-"),Object(u.b)("td",null,"The Callback fires when the state has changed.",Object(u.b)("br",null),Object(u.b)("em",null,Object(u.b)("strong",null,"Signature:"))," ",Object(u.b)("inlineCode",null,"function(event: React.ChangeEvent, checkedState: boolean) => void"),Object(u.b)("br",null),Object(u.b)("em",null,Object(u.b)("strong",null,"Note:"))," ","You can also pull out the new checked state by accessing"," ",Object(u.b)("inlineCode",null,"event.target.checked")," (boolean)."))),Object(u.b)("tfoot",null,Object(u.b)("tr",null,Object(u.b)("td",{colSpan:"4"},Object(u.b)("ul",null,Object(u.b)("li",null,"The ",Object(u.b)("inlineCode",null,"ref")," is forwarded to the root element."),Object(u.b)("li",null,"Any other properties supplied will be provided to the root element.")))))))}P.isMDXComponent=!0},uC7D:function(e,t,n){(window.__NEXT_P=window.__NEXT_P||[]).push(["/docs/components/Checkbox",function(){return n("Amqx")}])}},[["uC7D",0,1,2,3,4,5,9]]]);